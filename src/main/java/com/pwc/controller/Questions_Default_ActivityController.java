package com.pwc.controller;

import java.util.ArrayList;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.pwc.domain.core.Questions;

import com.pwc.service.Questions_Default_ActivityService;



/**
 * 
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p> 
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/Questions_Default_Activity", description = "Questions_Default_Activity of Questions_Default_Activity", 
produces = "application/json")

@Controller("Questions_Default_ActivityController")
@RequestMapping("/Questions_Default_Activity")
public class Questions_Default_ActivityController extends GpBaseController {


	Questions_Default_ActivityService Questions_Default_Activity_service;


	public Questions_Default_ActivityService get_Questions_Default_Activity_service() {
		return Questions_Default_Activity_service;
	}


	@Resource(name="Questions_Default_ActivityService")
	public void set_Questions_Default_Activity_service(Questions_Default_ActivityService Questions_Default_Activity_service) {
		this.Questions_Default_Activity_service = Questions_Default_Activity_service;
	}




	//auths not ready at this time


	@ApiOperation(value = "/create_Questions", httpMethod = "POST",
	notes = "creates a noun of Questions", 
	response = Questions.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.POST,value = "/create_Questions" ,headers="Accept=application/json")
    @ResponseBody
	public Questions create_Questions(@RequestBody Questions the_Questions) throws Exception {

		Questions a_Questions;

		a_Questions = Questions_Default_Activity_service.create_questions(the_Questions, super.getUser());

		return a_Questions;

	}

	//auths not ready at this time


	@ApiOperation(value = "/update_Questions", httpMethod = "PUT",
	notes = "updates a noun of Questions", 
	response = Questions.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.PUT,value = "/update_Questions" ,headers="Accept=application/json")
    @ResponseBody
	public Questions update_Questions(@RequestBody Questions the_Questions) throws Exception {

		Questions a_Questions;

		a_Questions = Questions_Default_Activity_service.update_questions(the_Questions, super.getUser());

		return a_Questions;

	}

	//auths not ready at this time


	@ApiOperation(value = "/search_for_update_Questions/{Questions_id}", httpMethod = "GET",
	notes = "updates a noun of Questions", 
	response = Questions.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_Questions/{Questions_id}" ,headers="Accept=application/json")
    @ResponseBody
	public Questions search_for_update_Questions(@PathVariable("Questions_id")long Questions_id) throws Exception {

		Questions the_Questions = new Questions();

		the_Questions = Questions_Default_Activity_service.questions_search_for_update(Questions_id, super.getUser());

		return the_Questions;

	}

	//auths not ready at this time


	@ApiOperation(value = "/delete_Questions/{Questions_id}", httpMethod = "DELETE",
	notes = "deletes a noun of Questions", 
	response = Questions.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_Questions/{Questions_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_Questions(@PathVariable("Questions_id")long Questions_id) throws Exception {

		String service_return_msg = "";

		service_return_msg = Questions_Default_Activity_service.delete_questions(Questions_id, super.getUser());

		return service_return_msg;

	}

	//auths not ready at this time


	@ApiOperation(value = "/get_all_Questions", httpMethod = "GET",
	notes = "special search that gets all values of Questions", 
	response = Questions.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET,value = "/get_all_Questions" ,headers="Accept=application/json")
    @ResponseBody
	public ArrayList<Questions> get_all_Questions() throws Exception {

		ArrayList<Questions> Questions_list = new ArrayList<Questions>();

		Questions_list = Questions_Default_Activity_service.get_all_questions();

		return Questions_list;

	}

	//auths not ready at this time


	@ApiOperation(value = "/get_Questions_by_parent_id", httpMethod = "GET",
	notes = "get by parent id of Questions", 
	response = Questions.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.GET,value = "/get_Questions_by_parent_id" )
    @ResponseBody
	public ArrayList<Questions> get_Questions_by_parent_id(@RequestParam(required = false, value = "Check_List_Maintenance_Master_id", defaultValue = "0") long Check_List_Maintenance_Master_id) throws Exception {

		ArrayList<Questions> Questions_list = new ArrayList<Questions>();

		Questions_list = Questions_Default_Activity_service.get_questions_by_parent_id(Check_List_Maintenance_Master_id);

		return Questions_list;

	}

	//auths not ready at this time


	@ApiOperation(value = "/delete_Questions_by_parent_id", httpMethod = "DELETE",
	notes = "delete by parent of Questions", 
	response = Questions.class)
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The request was fulfilled"),
	    @ApiResponse(code = 404, message = "The server has not found anything matching the URI given"),
	    @ApiResponse(code = 500, message = "Internal server error due to encoding the data"),
	    @ApiResponse(code = 400, message = "Bad request due to decoding the data"),
	    @ApiResponse(code = 412, message = "Pre condition failed due to required data not found") })

	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_Questions_by_parent_id" )
    @ResponseBody
	public String  delete_Questions_by_parent_id(@RequestParam(required = false, value = "Check_List_Maintenance_Master_id", defaultValue = "0") long Check_List_Maintenance_Master_id) throws Exception {

		String service_return_msg = "";

		service_return_msg = Questions_Default_Activity_service.delete_questions_by_parent_id(Check_List_Maintenance_Master_id);

		return service_return_msg;

	}




}
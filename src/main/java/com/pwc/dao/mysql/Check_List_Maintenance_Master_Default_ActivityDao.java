package com.pwc.dao.mysql;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;


import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;


import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;



import com.pwc.domain.core.Check_List_Maintenance_Master;
import com.pwc.domain.core.GpUser;


/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Transactional
@Repository("Check_List_Maintenance_Master_Default_ActivityDao")
public class Check_List_Maintenance_Master_Default_ActivityDao   {

	private Log log = LogFactory.getLog(getClass());

	@Value("${create_Check_List_Maintenance_Master.sql}")
	private String create_Check_List_Maintenance_Master;
	@Value("${search_for_update_Check_List_Maintenance_Master.sql}")
	private String search_for_update_Check_List_Maintenance_Master;
	@Value("${update_Check_List_Maintenance_Master.sql}")
	private String update_Check_List_Maintenance_Master;
	@Value("${delete_Check_List_Maintenance_Master.sql}")
	private String delete_Check_List_Maintenance_Master;
	@Value("${get_all_Check_List_Maintenance_Master.sql}")
	private String get_all_Check_List_Maintenance_Master;


    @PersistenceContext
	EntityManager entityManager;



	//auths not ready at this time
	public Check_List_Maintenance_Master check_list_maintenance_master_search_for_update(long id, GpUser user) throws Exception {


		try{

			Query result =  entityManager.
			createNativeQuery(search_for_update_Check_List_Maintenance_Master,Check_List_Maintenance_Master.class)

			.setParameter("id", id);;

			ArrayList<Check_List_Maintenance_Master> Check_List_Maintenance_Master_list =	(ArrayList<Check_List_Maintenance_Master>)result.getResultList();

			if(Check_List_Maintenance_Master_list  == null){
				throw new Exception("no Check_List_Maintenance_Master found");
			}

			return (Check_List_Maintenance_Master) Check_List_Maintenance_Master_list.get(0);

		}catch(Exception e){

			new Exception(e.toString());  // this needs to be changed

		}
		return null;


	}

	//auths not ready at this time
	public ArrayList<Check_List_Maintenance_Master> get_all_check_list_maintenance_master() throws Exception {


		try{

			Query result =  entityManager.
			createNativeQuery(get_all_Check_List_Maintenance_Master,Check_List_Maintenance_Master.class)

;

			ArrayList<Check_List_Maintenance_Master> Check_List_Maintenance_Master_list =	(ArrayList<Check_List_Maintenance_Master>)result.getResultList();

			if(Check_List_Maintenance_Master_list .size() < 1){
				throw new Exception("no Check_List_Maintenance_Master found");
			}

			return (ArrayList<Check_List_Maintenance_Master>) Check_List_Maintenance_Master_list;

		}catch(Exception e){

			new Exception(e.toString());  // this needs to be changed

		}
		return null;


	}



	//auths not ready at this time
	@Transactional
	public Check_List_Maintenance_Master create_check_list_maintenance_master(Check_List_Maintenance_Master Check_List_Maintenance_Master, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(create_Check_List_Maintenance_Master)
			.setParameter("name", Check_List_Maintenance_Master.getName())
			.setParameter("description", Check_List_Maintenance_Master.getDescription())
			.setParameter("work_flow_status", Check_List_Maintenance_Master.getWork_flow_status())
			.setParameter("territory", Check_List_Maintenance_Master.getTerritory())
			.setParameter("check_list_version", Check_List_Maintenance_Master.getCheck_list_version())
			.setParameter("version_date", Check_List_Maintenance_Master.getVersion_date())
			.setParameter("approved_by", Check_List_Maintenance_Master.getApproved_by())
			.setParameter("current_jason_state", Check_List_Maintenance_Master.getCurrent_jason_state())
			.setParameter("created_by", user == null ? 0:user.getId())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			int insertedId = query.executeUpdate();
					String lastIndex="select last_insert_id()";
					Query sql = entityManager.createNativeQuery(lastIndex);
					BigInteger new_id = (BigInteger) sql.getSingleResult();
					Check_List_Maintenance_Master.setId(new_id.longValue());
					System.out.println("create data---"+insertedId);

			return Check_List_Maintenance_Master;

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	@Transactional
	public Check_List_Maintenance_Master update_check_list_maintenance_master(Check_List_Maintenance_Master Check_List_Maintenance_Master, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(update_Check_List_Maintenance_Master)
			.setParameter("id", Check_List_Maintenance_Master.getId())
			.setParameter("name", Check_List_Maintenance_Master.getName())
			.setParameter("description", Check_List_Maintenance_Master.getDescription())
			.setParameter("work_flow_status", Check_List_Maintenance_Master.getWork_flow_status())
			.setParameter("territory", Check_List_Maintenance_Master.getTerritory())
			.setParameter("check_list_version", Check_List_Maintenance_Master.getCheck_list_version())
			.setParameter("version_date", Check_List_Maintenance_Master.getVersion_date())
			.setParameter("approved_by", Check_List_Maintenance_Master.getApproved_by())
			.setParameter("current_jason_state", Check_List_Maintenance_Master.getCurrent_jason_state())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			query.executeUpdate();

			return Check_List_Maintenance_Master;

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	@Transactional
	public String  delete_check_list_maintenance_master(long id, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(delete_Check_List_Maintenance_Master)
			.setParameter("id", id);

			query.executeUpdate();

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString());

		}
		return null;



	}



}
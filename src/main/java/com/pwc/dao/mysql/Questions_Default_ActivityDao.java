package com.pwc.dao.mysql;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;


import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;


import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;



import com.pwc.domain.core.Questions;
import com.pwc.domain.core.GpUser;


/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Transactional
@Repository("Questions_Default_ActivityDao")
public class Questions_Default_ActivityDao   {

	private Log log = LogFactory.getLog(getClass());

	@Value("${create_Questions.sql}")
	private String create_Questions;
	@Value("${search_for_update_Questions.sql}")
	private String search_for_update_Questions;
	@Value("${update_Questions.sql}")
	private String update_Questions;
	@Value("${delete_Questions.sql}")
	private String delete_Questions;
	@Value("${get_all_Questions.sql}")
	private String get_all_Questions;
	@Value("${get_by_parent_id_Questions.sql}")
	private String get_by_parent_id_Questions;
	@Value("${delete_by_parent_id_Questions.sql}")
	private String delete_by_parent_id_Questions;


    @PersistenceContext
	EntityManager entityManager;



	//auths not ready at this time
	public Questions questions_search_for_update(long id, GpUser user) throws Exception {


		try{

			Query result =  entityManager.
			createNativeQuery(search_for_update_Questions,Questions.class)

			.setParameter("id", id);;

			ArrayList<Questions> Questions_list =	(ArrayList<Questions>)result.getResultList();

			if(Questions_list  == null){
				throw new Exception("no Questions found");
			}

			return (Questions) Questions_list.get(0);

		}catch(Exception e){

			new Exception(e.toString());  // this needs to be changed

		}
		return null;


	}

	//auths not ready at this time
	public ArrayList<Questions> get_all_questions() throws Exception {


		try{

			Query result =  entityManager.
			createNativeQuery(get_all_Questions,Questions.class)

;

			ArrayList<Questions> Questions_list =	(ArrayList<Questions>)result.getResultList();

			if(Questions_list .size() < 1){
				throw new Exception("no Questions found");
			}

			return (ArrayList<Questions>) Questions_list;

		}catch(Exception e){

			new Exception(e.toString());  // this needs to be changed

		}
		return null;


	}

	//auths not ready at this time
	public ArrayList<Questions> get_questions_by_parent_id(long Check_List_Maintenance_Master_id) throws Exception {


		try{

			Query result =  entityManager.
			createNativeQuery(get_by_parent_id_Questions,Questions.class)

			.setParameter("Check_List_Maintenance_Master_id", Check_List_Maintenance_Master_id == 0 ? "%%" : Check_List_Maintenance_Master_id);

			ArrayList<Questions> Questions_list =	(ArrayList<Questions>)result.getResultList();

			if(Questions_list .size() < 1){
				throw new Exception("no Questions found");
			}

			return (ArrayList<Questions>) Questions_list;

		}catch(Exception e){

			new Exception(e.toString());  // this needs to be changed

		}
		return null;


	}



	//auths not ready at this time
	@Transactional
	public Questions create_questions(Questions Questions, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(create_Questions)
			.setParameter("type", Questions.getType())
			.setParameter("answer_type", Questions.getAnswer_type())
			.setParameter("question", Questions.getQuestion())
			.setParameter("tree_position", Questions.getTree_position())
			.setParameter("Check_List_Maintenance_Master_id", Questions.getCheck_List_Maintenance_Master_id())
			.setParameter("created_by", user == null ? 0:user.getId())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			int insertedId = query.executeUpdate();
					String lastIndex="select last_insert_id()";
					Query sql = entityManager.createNativeQuery(lastIndex);
					BigInteger new_id = (BigInteger) sql.getSingleResult();
					Questions.setId(new_id.longValue());
					System.out.println("create data---"+insertedId);

			return Questions;

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	@Transactional
	public Questions update_questions(Questions Questions, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(update_Questions)
			.setParameter("id", Questions.getId())
			.setParameter("type", Questions.getType())
			.setParameter("answer_type", Questions.getAnswer_type())
			.setParameter("question", Questions.getQuestion())
			.setParameter("tree_position", Questions.getTree_position())
			.setParameter("Check_List_Maintenance_Master_id", Questions.getCheck_List_Maintenance_Master_id())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			query.executeUpdate();

			return Questions;

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	@Transactional
	public String  delete_questions(long id, GpUser user) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(delete_Questions)
			.setParameter("id", id);

			query.executeUpdate();

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	@Transactional
	public String  delete_questions_by_parent_id(long Check_List_Maintenance_Master_id) throws Exception {


		try{
			Query query = entityManager
					.createNativeQuery(delete_by_parent_id_Questions)
			.setParameter("Check_List_Maintenance_Master_id", Check_List_Maintenance_Master_id == 0 ? "%%" : Check_List_Maintenance_Master_id);

			query.executeUpdate();

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			System.out.println("DAOException: " + e.toString());

		}
		return null;



	}



}
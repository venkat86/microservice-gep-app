package com.pwc.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;



import com.pwc.domain.core.Answers;

import com.pwc.domain.core.Check_List_Maintenance_Master;

import com.pwc.domain.core.Questions;

import com.pwc.domain.core.In_flight_checklists;

import com.pwc.dao.mysql.Answers_Default_ActivityDao;

import com.pwc.domain.core.GpUser;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("Answers_Default_ActivityService")
public class Answers_Default_ActivityService extends GpBaseService  {

	Answers_Default_ActivityDao Answers_Default_Activity_dao;


	public Answers_Default_ActivityDao get_Answers_Default_Activity_dao() {
		return Answers_Default_Activity_dao;
	}


	@Resource(name="Answers_Default_ActivityDao")
	public void set_Answers_Default_Activity_dao(Answers_Default_ActivityDao Answers_Default_Activity_dao) {
		this.Answers_Default_Activity_dao = Answers_Default_Activity_dao;
	}



	//auths not ready at this time
	public Answers create_answers(Answers Answers, GpUser user) throws Exception {


		try{
			Answers the_Answers;

			the_Answers = Answers_Default_Activity_dao.create_answers(Answers, user);

			return the_Answers;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public Answers update_answers(Answers Answers, GpUser user) throws Exception {


		try{
			Answers the_Answers;

			the_Answers = Answers_Default_Activity_dao.update_answers(Answers, user);

			return the_Answers;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public Answers answers_search_for_update(long id, GpUser user) throws Exception {


		try{
			Answers the_Answers;

			the_Answers = Answers_Default_Activity_dao.answers_search_for_update(id, user);

			return the_Answers;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public String  delete_answers(long id, GpUser user) throws Exception {


		try{
			String method_return_message;

			method_return_message = Answers_Default_Activity_dao.delete_answers(id, user);

			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public ArrayList<Answers> get_all_answers() throws Exception {


		try{
			ArrayList<Answers> Answers_list;

			Answers_list = Answers_Default_Activity_dao.get_all_answers();

			return Answers_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public ArrayList<Answers> get_answers_by_parent_id(long Check_List_Maintenance_Master_id,long Questions_id,long In_flight_checklists_id) throws Exception {


		try{
			ArrayList<Answers> Answers_list;

			Answers_list = Answers_Default_Activity_dao.get_answers_by_parent_id(Check_List_Maintenance_Master_id, Questions_id, In_flight_checklists_id);

			return Answers_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public String  delete_answers_by_parent_id(long Check_List_Maintenance_Master_id,long Questions_id,long In_flight_checklists_id) throws Exception {


		try{
			String method_return_message;

			method_return_message = Answers_Default_Activity_dao.delete_answers_by_parent_id(Check_List_Maintenance_Master_id, Questions_id, In_flight_checklists_id);

			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}




}
package com.pwc.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;



import com.pwc.domain.core.Questions;

import com.pwc.domain.core.Check_List_Maintenance_Master;

import com.pwc.dao.mysql.Questions_Default_ActivityDao;

import com.pwc.domain.core.GpUser;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("Questions_Default_ActivityService")
public class Questions_Default_ActivityService extends GpBaseService  {

	Questions_Default_ActivityDao Questions_Default_Activity_dao;

	Answers_Default_ActivityService Answers_Default_ActivityService;


	public Questions_Default_ActivityDao get_Questions_Default_Activity_dao() {
		return Questions_Default_Activity_dao;
	}


	@Resource(name="Questions_Default_ActivityDao")
	public void set_Questions_Default_Activity_dao(Questions_Default_ActivityDao Questions_Default_Activity_dao) {
		this.Questions_Default_Activity_dao = Questions_Default_Activity_dao;
	}


	public Answers_Default_ActivityService get_Answers_Default_ActivityService() {
		return Answers_Default_ActivityService;
	}


	@Resource(name="Answers_Default_ActivityService")
	public void set_Answers_Default_ActivityService(Answers_Default_ActivityService Answers_Default_ActivityService) {
		this.Answers_Default_ActivityService = Answers_Default_ActivityService;
	}



	//auths not ready at this time
	public Questions create_questions(Questions Questions, GpUser user) throws Exception {


		try{
			Questions the_Questions;

			the_Questions = Questions_Default_Activity_dao.create_questions(Questions, user);

			return the_Questions;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public Questions update_questions(Questions Questions, GpUser user) throws Exception {


		try{
			Questions the_Questions;

			the_Questions = Questions_Default_Activity_dao.update_questions(Questions, user);

			return the_Questions;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public Questions questions_search_for_update(long id, GpUser user) throws Exception {


		try{
			Questions the_Questions;

			the_Questions = Questions_Default_Activity_dao.questions_search_for_update(id, user);
			the_Questions.setAnswers(Answers_Default_ActivityService.get_answers_by_parent_id(0,the_Questions.getId(),0).get(0));


			return the_Questions;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public String  delete_questions(long id, GpUser user) throws Exception {


		try{
			String method_return_message;

			method_return_message = Questions_Default_Activity_dao.delete_questions(id, user);
			Answers_Default_ActivityService.delete_answers_by_parent_id(0,id,0);


			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public ArrayList<Questions> get_all_questions() throws Exception {


		try{
			ArrayList<Questions> Questions_list;

			Questions_list = Questions_Default_Activity_dao.get_all_questions();
			for(Questions Questions : Questions_list){
				Questions.setAnswers(Answers_Default_ActivityService.get_answers_by_parent_id(0,Questions.getId(),0).get(0));
			}

			return Questions_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public ArrayList<Questions> get_questions_by_parent_id(long Check_List_Maintenance_Master_id) throws Exception {


		try{
			ArrayList<Questions> Questions_list;

			Questions_list = Questions_Default_Activity_dao.get_questions_by_parent_id(Check_List_Maintenance_Master_id);

			return Questions_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}

	//auths not ready at this time
	public String  delete_questions_by_parent_id(long Check_List_Maintenance_Master_id) throws Exception {


		try{
			String method_return_message;

			method_return_message = Questions_Default_Activity_dao.delete_questions_by_parent_id(Check_List_Maintenance_Master_id);

			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());

		}
		return null;



	}




}